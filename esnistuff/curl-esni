#!/bin/bash

mesg () { [ $1 -le ${MSG_LEVEL:-1} ] || return; echo "${0##*/}: $@" >&2; }
warn () { mesg 1 "$@"; }
fail () { mesg 0 "$@"; exit 3; }

usage () {
    cat <<EOF

    Usage:
        ${0##*/} URL

    Supported URL schemes:
        HTTPS

    Examples:
        ESNI_PROFILE=NONE ${0##*/} https://only.esni.defo.ie/stats 

    Environment:

      ESNI_PROFILE 
        is optional and case-insensitive. It may be specified as 
        any of the following.

        'none' -- disable ESNI;

        'draft3' or 'draft-3' -- use ESNI according to Draft 3;

        'draft4' or 'draft-4' -- use ESNI according to Draft 4;

        otherwise -- use ESNI according to Draft 2.

      ESNI_COVER
        is optional. It may be specified as any of the following.

        '' (empty string) -- for Draft 3, set the ESNI covername
          parameter from the published ESNI public_name, if any;
          otherwise use ESNI without setting the ESNI covername 
          parameter;

        any whitespace-free string -- set the ESNI covername
          parameter from this string;

        omitted -- set the ESNI covername parameter heuristically.

      ESNI_SERVER
        is DEPRECATED. 

        If defined and not an empty string, it specifies the hostname
        to use as the value of the '--esni-server' command-line option
        for the curl tool.  Recent editions of ESNI-enabled curl do
        not recognize this command-line option.

      DOH_URL
        is optional. It specifies the URL of a DNS-over-HTTPS 
        service which is to be used for address resolution and
        (in future) fetching ESNI data.

EOF
}

if [ -z "$1" ]
then
    usage
    exit 1
fi

scheme=${1%%://*}
mesg 2 "parsed 'scheme'   ($scheme)"

rest=${1#*://}
# warn "parsed 'rest'     ($rest)"

hostname=${rest%%/*}
mesg 2 "parsed 'hostname' ($hostname)"

if [ "$hostname" != "$rest" ]
then
    # "normal" case: '/' follows hostname
    rest="/${rest#*/}"
else
    rest=''
fi

resource=${rest%%\?*}
qstring=${rest#*\?}
[ "$qstring" != "$resource" ] || qstring=''
mesg 2 "parsed 'resource' ($resource)"
mesg 2 "parsed 'qstring'  ($qstring)"

esni_server=''
if [ "${ESNI_SERVER}" ]
then
    esni_server="--esni-server ${ESNI_SERVER}"
fi

if [ "${ESNI_COVER+set}" ]
then
    warn "Found ESNI_COVER (${ESNI_COVER})"
    esni_cover=''
    if [ "${ESNI_COVER}" ]
    then
	esni_cover="--esni-cover ${ESNI_COVER}"
    fi
else
    # ESNI_COVER  not set: use default string
    case "${hostname,,[A-Z]}" in
	*.esni.defo.ie)
	    : ${ESNI_COVER:="cover.defo.ie"}
	    ;;
	*)
	    : ${ESNI_COVER:="encryptedsni.com"}
	    ;;
    esac
    esni_cover="--esni-cover ${ESNI_COVER}"
fi

if [ "$DOH_URL" ]
then
    enable_doh="--doh-url $DOH_URL"
else
   enable_doh=''
fi

enable_esni=''			# place-holder for `--no-esni`

: ${ESNI_PROFILE:=DRAFT2}

case "${ESNI_PROFILE^^[a-z]}" in
    NONE)
	# Allow opt-out for reference to behaviour without ESNI
	enable_esni='--no-esni'
	;;
    DRAFT3|DRAFT-3)
	: ${ESNI_KEYS:=`dig +short -t TYPE65439 $hostname | grep ' FF02' | sed -e 's|^[^ ]* [^ ]* ||' -e 's| ||g'`}
    ;;
    DRAFT4|DRAFT-4)
	: ${ESNI_KEYS:=`dig +short -t TYPE65439 $hostname | grep ' FF03' | sed -e 's|^[^ ]* [^ ]* ||' -e 's| ||g'`}
    ;;
    *)
	# Default: use DRAFT2
	: ${ESNI_KEYS:=`dig +short -t txt _esni.$hostname | sed -e 's|^\(["]\)\(.*\)\1$|\2|'`}
    ;;
esac

# TODO: condition PATH using `build push` instead of here
export PATH="src:$PATH"

#set -x

curl \
    ${CURL_OPTIONS:="--verbose"} \
    $enable_doh \
    $enable_esni \
    $esni_server \
    $esni_cover \
    --esni-load "${ESNI_KEYS}" \
    $1

exit $?
